import { createClient } from "https://esm.sh/@supabase/supabase-js@2";

// ‚úÖ Types
interface ContactFormData {
  name: string;
  email: string;
  phone: string;
  message: string;
  recaptcha_token: string;
  honeypot?: string;
  form_timestamp?: number;
}

// ‚úÖ Environment Variables
const SUPABASE_URL = Deno.env.get("PROJECT_URL")!;
const SERVICE_ROLE_KEY = Deno.env.get("SERVICE_ROLE_KEY")!;
const RECAPTCHA_SECRET =
  Deno.env.get("VERCEL_ENV") === "production"
    ? Deno.env.get("RECAPTCHA_SECRET")!
    : Deno.env.get("RECAPTCHA_SECRET_LOCAL")!;
const SENDGRID_API_KEY = Deno.env.get("SENDGRID_API_KEY")!;
const FROM_EMAIL = Deno.env.get("FROM_EMAIL")!;
const COMPANY_EMAIL = Deno.env.get("COMPANY_EMAIL")!;
const WEBHOOK_URL =
  Deno.env.get("SLACK_WEBHOOK_URL") || Deno.env.get("DISCORD_WEBHOOK_URL");

const supabase = createClient(SUPABASE_URL, SERVICE_ROLE_KEY);

// ‚úÖ CORS
function getCorsHeaders(req: Request): Record<string, string> {
  const allowedOrigins = [
    "http://localhost:5173",
    "https://techrayos.com",
    "https://www.techrayos.com",
    "https://techrayos-portfolio.vercel.app",
  ];
  const origin = req.headers.get("origin") || "";
  return {
    "Access-Control-Allow-Origin": allowedOrigins.includes(origin)
      ? origin
      : "https://techrayos.com",
    "Access-Control-Allow-Headers":
      "authorization, x-client-info, apikey, content-type",
    "Access-Control-Allow-Methods": "POST, OPTIONS",
  };
}

// üß† Verify reCAPTCHA
async function verifyRecaptcha(token: string, remoteip?: string) {
  const params = new URLSearchParams();
  params.append("secret", RECAPTCHA_SECRET);
  params.append("response", token);
  if (remoteip) params.append("remoteip", remoteip);

  const resp = await fetch("https://www.google.com/recaptcha/api/siteverify", {
    method: "POST",
    body: params,
  });
  if (!resp.ok) return { success: false };
  return resp.json();
}

// üì© Send Emails with SendGrid
async function sendEmails(name: string, userEmail: string, phone: string, message: string) {
  try {
    // 1Ô∏è‚É£ Confirmation Email to User
    const userMail = {
      personalizations: [
        {
          to: [{ email: userEmail }],
          bcc: [{ email: COMPANY_EMAIL }],
          subject: `üì© Thank you ${name}, we received your message!`,
        },
      ],
      from: { email: FROM_EMAIL, name: "Techrayos" },
      reply_to: { email: COMPANY_EMAIL },
      content: [
        {
          type: "text/html",
          value: `
          <div style="font-family:'Segoe UI',Tahoma,Verdana,sans-serif;background:#f9f9f9;padding:20px;">
            <div style="max-width:600px;background:#fff;border-radius:10px;padding:25px;margin:auto;box-shadow:0 4px 12px rgba(0,0,0,0.1);">
              <h2 style="color:#2563eb;text-align:center;margin-bottom:20px;">‚úÖ Thank You for Contacting Techrayos!</h2>
              <p style="font-size:16px;color:#333;">Hi <strong>${name}</strong>,<br/>We‚Äôve received your message. Our team will get back to you shortly.</p>
              <p style="font-size:16px;color:#333;"><strong>Your Message:</strong><br/>${message}</p>
              <hr style="margin:20px 0;"/>
              <p style="font-size:13px;color:#888;text-align:center;">üì© This is an automated response from Techrayos. Please do not reply to this email.</p>
            </div>
          </div>`,
        },
      ],
    };

    // 2Ô∏è‚É£ Internal Notification Email
    const adminMail = {
      personalizations: [
        {
          to: [{ email: COMPANY_EMAIL }],
          subject: `üì¨ New Contact Form Submission ‚Äî ${name}`,
        },
      ],
      from: { email: FROM_EMAIL, name: "Techrayos Website" },
      content: [
        {
          type: "text/html",
          value: `
          <h3>New Contact Form Submission</h3>
          <p><strong>Name:</strong> ${name}</p>
          <p><strong>Email:</strong> ${userEmail}</p>
          <p><strong>Phone:</strong> ${phone}</p>
          <p><strong>Message:</strong><br/>${message}</p>
          <hr/>
          <p style="color:#999;font-size:12px;">This alert was generated by Techrayos.com.</p>`,
        },
      ],
    };

    for (const mail of [userMail, adminMail]) {
      const res = await fetch("https://api.sendgrid.com/v3/mail/send", {
        method: "POST",
        headers: {
          Authorization: `Bearer ${SENDGRID_API_KEY}`,
          "Content-Type": "application/json",
        },
        body: JSON.stringify(mail),
      });
      if (!res.ok) console.error("‚ö†Ô∏è SendGrid error:", await res.text());
    }

    console.log("‚úÖ Emails sent successfully");
  } catch (err) {
    console.error("üì© SendGrid error:", err);
  }
}

// üîî Slack or Discord Webhook Notification
async function sendWebhookAlert(name: string, email: string, phone: string, message: string) {
  if (!WEBHOOK_URL) return;

  const payload = {
    username: "Techrayos Bot ü§ñ",
    content: `
**New Contact Form Submission**
> **Name:** ${name}
> **Email:** ${email}
> **Phone:** ${phone}
> **Message:** ${message}
    `,
  };

  try {
    const res = await fetch(WEBHOOK_URL, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(payload),
    });
    if (!res.ok) console.error("‚ö†Ô∏è Webhook failed:", await res.text());
    else console.log("‚úÖ Webhook alert sent");
  } catch (err) {
    console.error("Webhook error:", err);
  }
}

// üöÄ Main handler
Deno.serve(async (req: Request) => {
  const corsHeaders = getCorsHeaders(req);

  if (req.method === "OPTIONS")
    return new Response("ok", { headers: corsHeaders });

  if (req.method !== "POST")
    return new Response(JSON.stringify({ error: "Method not allowed" }), {
      status: 405,
      headers: corsHeaders,
    });

  try {
    const body: ContactFormData = await req.json();
    const { name, email, phone, message, recaptcha_token, honeypot, form_timestamp } = body;

    if (!name || !email || !phone || !message || !recaptcha_token)
      return new Response(JSON.stringify({ error: "Missing required fields" }), {
        status: 400,
        headers: corsHeaders,
      });

    if (honeypot && honeypot.trim() !== "")
      return new Response(JSON.stringify({ error: "Bot detected" }), {
        status: 400,
        headers: corsHeaders,
      });

    const now = Date.now();
    if (!form_timestamp || now - Number(form_timestamp) < 2000)
      return new Response(JSON.stringify({ error: "Suspicious submission" }), {
        status: 400,
        headers: corsHeaders,
      });

    const ip =
      req.headers.get("x-forwarded-for")?.split(",")[0]?.trim() ||
      req.headers.get("x-real-ip") ||
      req.headers.get("cf-connecting-ip") ||
      "unknown";

    // üß† Verify reCAPTCHA
    const vr = await verifyRecaptcha(recaptcha_token, ip);
    if (!vr || !vr.success)
      return new Response(JSON.stringify({ error: "Bot verification failed" }), {
        status: 400,
        headers: corsHeaders,
      });

    // üõ°Ô∏è Rate Limit
    const oneHourAgo = new Date(Date.now() - 60 * 60 * 1000).toISOString();
    const { count } = await supabase
      .from("contact_submission_logs")
      .select("id", { count: "exact" })
      .eq("ip", ip)
      .gte("created_at", oneHourAgo);

    if (count && count >= 5)
      return new Response(JSON.stringify({ error: "Too many requests" }), {
        status: 429,
        headers: corsHeaders,
      });

    // üíæ Save to DB
    const { error: insertErr } = await supabase
      .from("contact_submissions")
      .insert([{ name, email, phone, message }]);

    if (insertErr)
      return new Response(JSON.stringify({ error: "Database insert failed" }), {
        status: 500,
        headers: corsHeaders,
      });

    await supabase.from("contact_submission_logs").insert([{ ip }]);

    // üì© Send emails + notification
    await sendEmails(name, email, phone, message);
    await sendWebhookAlert(name, email, phone, message);

    return new Response(JSON.stringify({ success: true }), {
      status: 200,
      headers: corsHeaders,
    });
  } catch (err) {
    console.error("Unexpected error:", err);
    return new Response(JSON.stringify({ error: "Unexpected error" }), {
      status: 500,
      headers: corsHeaders,
    });
  }
});
